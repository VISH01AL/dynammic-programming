import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
 {
	 public static void main (String[] args) throws IOException
	 {
	 BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
	 StringBuffer sb=new StringBuffer();
	 int T=Integer.parseInt(br.readLine());
	 while(T-->0)
	 {
	     String[] s0=br.readLine().split(" ");
	     int n=Integer.parseInt(s0[0]);
	     int capacity=Integer.parseInt(s0[1]);
	     String[] s=br.readLine().split(" ");
	     String[] s1=br.readLine().split(" ");
	     int[] val=new int[n];
	     int[] w=new int[n];
	     for(int i=0;i<n;i++)
	     {
	         w[i]=Integer.parseInt(s[i]);
	         val[i]=Integer.parseInt(s1[i]);
	     }
	     int[] dp=new int[capacity+1];
	     Arrays.fill(dp,-1);
	     System.out.print(knapsackdp(val,w,capacity,dp)+"\n");
	 }
	 System.out.print(sb);
	 }
	 public static int knapsackdp(int[] val,int[] wt,int valcap,int[] dp)
	 {
        if(dp[valcap]!=-1)
        {
            return dp[valcap];
        }
	     int ans=0;
	     for(int i=0;i<val.length;i++)
	     {
	         int smallans=valcap-val[i];
	         if(smallans>=0)
	         {
	           ans=Math.max(ans,wt[i]+knapsackdp(val,wt,smallans,dp));
	         }
	     }
	     return dp[valcap]=ans;
	 }
}